{"version":3,"file":"static/js/621.adb554ea.chunk.js","mappings":"sMAGO,SAASA,EAAT,GAA+B,IAAXC,EAAU,EAAVA,OACnBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,0BACE,+BACGF,QADH,IACGA,OADH,EACGA,EAAQG,KAAI,YAAoB,IAAjBC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MAClB,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAMP,GAA1C,SACGI,KAFID,Y,0MCTrBK,IAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,4CAEHC,EAAiB,mCAAG,oGACRF,IAAAA,IAAA,6BAAgCC,IADxB,cACzBE,EADyB,yBAExBA,EAASC,KAAKC,QAAQX,KAAI,YAC/B,MAAO,CACLC,GAFgD,EAAhBA,GAGhCC,MAHgD,EAAZA,WAFT,2CAAH,qDAUjBU,EAAW,mCAAG,WAAMC,GAAN,uFACFP,IAAAA,IAAA,iBAAoBO,GAApB,OAA4BN,EAA5B,oBADE,cACnBE,EADmB,yBAElBA,EAASC,MAFS,2CAAH,sDAKXI,EAAO,mCAAG,WAAMD,GAAN,uFACEP,IAAAA,IAAA,iBACXO,EADW,mBACKN,EADL,oBADF,cACfE,EADe,yBAIdA,EAASC,KAAKK,KAAKf,KAAI,YAC5B,MAAO,CACLgB,KAFqE,EAAxCA,KAG7BC,UAHqE,EAAlCA,UAInCC,aAJqE,EAAvBA,aAK9CjB,GALqE,EAATA,QAJ3C,2CAAH,sDAcPkB,EAAU,mCAAG,WAAMN,GAAN,uFACDP,IAAAA,IAAA,iBACXO,EADW,mBACKN,EADL,2BADC,cAClBE,EADkB,yBAIjBA,EAASC,KAAKC,QAAQX,KAAI,YAC/B,MAAO,CACLoB,OAF0D,EAA1BA,OAGhCC,QAH0D,EAAlBA,QAIxCpB,GAJ0D,EAATA,QAJ7B,2CAAH,sDAaVqB,EAAS,mCAAG,WAAMT,GAAN,uFACAP,IAAAA,IAAA,uBACLC,EADK,kBACYM,EADZ,YADA,cACjBJ,EADiB,yBAIhBA,EAASC,KAAKC,QAAQX,KAAI,YAC/B,MAAO,CACLC,GAFgD,EAAhBA,GAGhCC,MAHgD,EAAZA,WAJjB,2CAAH,uD,0GC5Cf,SAASqB,IACd,OAAsCC,EAAAA,EAAAA,MAAtC,eAAKC,EAAL,KAAmBC,EAAnB,KACMC,GAAYC,EAAAA,EAAAA,WAElBC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQL,EAAaM,IAAI,SAC3BD,IACFH,EAAUK,QAAQnB,MAAQiB,KAE3B,CAACL,IAOJ,OACE,0BACE,kBAAMQ,OAAO,GAAGC,SAPC,SAAAC,GACnBA,EAAEC,iBACFV,EAAgB,CAAEI,MAAOK,EAAEE,OAAOC,OAAOzB,SAKvC,WACE,kBAAO0B,IAAKZ,EAAWa,KAAK,OAAOxB,KAAK,YACxC,mBAAQwB,KAAK,SAAb,yB,uBCGR,EApBe,WACb,OAA4BC,EAAAA,EAAAA,UAAS,MAArC,eAAO5C,EAAP,KAAe6C,EAAf,KACA,GAAqBlB,EAAAA,EAAAA,MAAhBC,GAAL,eASA,OAPAI,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQL,EAAaM,IAAI,SAC3BD,GACFa,EAAAA,GAAcb,GAAOc,MAAK,SAAAC,GAAC,OAAIH,EAAUG,QAE1C,CAACpB,KAGF,iCACE,SAACF,EAAD,IACC1B,IAAU,SAACD,EAAA,EAAD,CAAUC,OAAQA,IACT,KAAb,OAANA,QAAM,IAANA,OAAA,EAAAA,EAAQiD,UAAgB","sources":["components/FilmList/FilmList.jsx","services/api.js","components/SearchForm/SearchForm.jsx","views/Movies.jsx"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport function FilmList({ movies }) {\n  const location = useLocation();\n\n  return (\n    <div>\n      <ul>\n        {movies?.map(({ id, title }) => {\n          return (\n            <li key={id}>\n              <Link to={`/movies/${id}`} state={{ from: location }}>\n                {title}\n              </Link>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\nFilmList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '?api_key=82c1ce3c1871a305a32604bda0daa5b4';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(`/trending/movie/day${API_KEY}`);\n  return response.data.results.map(({ id, title }) => {\n    return {\n      id,\n      title,\n    };\n  });\n};\n\nexport const getOneMovie = async value => {\n  const response = await axios.get(`/movie/${value}${API_KEY}&language=en-US`);\n  return response.data;\n};\n\nexport const getCast = async value => {\n  const response = await axios.get(\n    `/movie/${value}/credits${API_KEY}&language=en-US`\n  );\n  return response.data.cast.map(({ name, character, profile_path, id }) => {\n    return {\n      name,\n      character,\n      profile_path,\n      id,\n    };\n  });\n};\n\nexport const getReviews = async value => {\n  const response = await axios.get(\n    `/movie/${value}/reviews${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results.map(({ author, content, id }) => {\n    return {\n      author,\n      content,\n      id,\n    };\n  });\n};\n\nexport const getMovies = async value => {\n  const response = await axios.get(\n    `/search/movie${API_KEY}&query=${value}&page=1`\n  );\n  return response.data.results.map(({ id, title }) => {\n    return {\n      id,\n      title,\n    };\n  });\n};\n","import { useEffect, useRef } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nexport function SearchForm() {\n  let [searchParams, setSearchParams] = useSearchParams();\n  const inputForm = useRef();\n\n  useEffect(() => {\n    const query = searchParams.get('query');\n    if (query) {\n      inputForm.current.value = query;\n    }\n  }, [searchParams]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setSearchParams({ query: e.target.search.value });\n  };\n\n  return (\n    <div>\n      <form action=\"\" onSubmit={handleSubmit}>\n        <input ref={inputForm} type=\"text\" name=\"search\" />\n        <button type=\"submit\">Search</button>\n      </form>\n    </div>\n  );\n}\n","import { SearchForm } from 'components/SearchForm/SearchForm';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport * as API from 'services/api';\nimport { FilmList } from 'components/FilmList/FilmList';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState(null);\n  let [searchParams] = useSearchParams();\n\n  useEffect(() => {\n    const query = searchParams.get('query');\n    if (query) {\n      API.getMovies(query).then(r => setMovies(r));\n    }\n  }, [searchParams]);\n\n  return (\n    <>\n      <SearchForm />\n      {movies && <FilmList movies={movies} />}\n      {movies?.length === 0 && <p>Nothing is found</p>}\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["FilmList","movies","location","useLocation","map","id","title","to","state","from","axios","API_KEY","getTrendingMovies","response","data","results","getOneMovie","value","getCast","cast","name","character","profile_path","getReviews","author","content","getMovies","SearchForm","useSearchParams","searchParams","setSearchParams","inputForm","useRef","useEffect","query","get","current","action","onSubmit","e","preventDefault","target","search","ref","type","useState","setMovies","API","then","r","length"],"sourceRoot":""}